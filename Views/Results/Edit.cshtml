@model ResultManagement.ViewModel.ResultViewModel

@{
    ViewBag.Title = "Edit";
}
    <script src="https://unpkg.com/jquery@3.3.1/dist/jquery.js"></script>
    <h2>Edit Result</h2>


@using (Html.BeginForm("Edit","Results",FormMethod.Post, new { enctype = "multipart/form-data"}))
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.EditorFor(model => model.UnitCode, new { htmlAttributes = new { @class = "form-control" } })*@
            @*@Html.DropDownListFor(model => model.UnitCode, new SelectList(ViewBag.UnitCodes), (string)@ViewBag.SelectedUnitCode
           , htmlAttributes: new { @class = "form-control opt" })*@
            <select class="form-control" name="UnitCode">
                <option value="@ViewBag.SelectedUnitCode">@ViewBag.SelectedUnitCode</option>
                @foreach (var item in ViewBag.UnitCodes)
                {
                    <option value="@item">@item</option>
                }
            </select>
            @Html.ValidationMessageFor(model => model.UnitCode, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.StudentId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.EditorFor(model => model.StudentId, new { htmlAttributes = new { @class = "form-control" } })*@
            @*@Html.DropDownListFor(model => model.StudentId, new SelectList(ViewBag.StudentIds), (string)ViewBag.SelectedStudent
           , htmlAttributes: new { @class = "form-control opt" })*@
            <select class="form-control" name="StudentId">
                <option value="@ViewBag.SelectedStudent">@ViewBag.SelectedStudent</option>
                @foreach (var item in ViewBag.StudentIds)
                {
                    <option value="@item">@item</option>
                }
            </select>
            @Html.ValidationMessageFor(model => model.StudentId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Semester, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Semester, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Semester, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AssessmentScore1, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AssessmentScore1, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AssessmentScore1, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AssessmentScore2, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AssessmentScore2, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AssessmentScore2, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ExamScore, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ExamScore, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ExamScore, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Image Preview", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10"><img class="img-responsive" id="targetImg" style="height:250px;width:250px;margin-bottom:10px" src="@Url.Content(Model.ImgPath)" /></div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ImgFile, htmlAttributes: new { @class = "control-label col-md-2" }) (Max: 4mb)
        <div class="col-md-10">
            <p id="ImgError" class="" style="color:red;">@ViewBag.ImgError</p>
            <p id="imgFileSizeError" style="color:red;"></p>
            <p id="imgFileFormatError" style="color:red;"></p>
            <input type="file" id="imgFile" name="ImgFile" accept="image/*" value="Choose Image" />
            @*@Html.ValidationMessageFor(model => model.PdfFile, "", new { @class = "text-danger" })*@
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" id="submitButton" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>

    var imgFileSizeError = document.getElementById("imgFileSizeError");
    var imgFile = document.getElementById("imgFile");
    var submitButton = document.getElementById("submitButton");
    var ImgError = document.getElementById("ImgError");


    $(document).ready(function () {
        $("#imgFile").change(function () {
            var File = this.files;
            if (File && File[0]) {
                ReadImage(File[0]);
            }
        })
    })


    var ReadImage = function (file) {
        var reader = new FileReader;
        var image = new Image;

        reader.readAsDataURL(file);
        reader.onload = function (_file) {
            image.src = _file.target.result;
            image.onload = function () {
                var height = this.height;
                var width = this.width;
                var type = file.type;
                var size = ~~(file.size / 1024) + "KB";
                $("#targetImg").attr('src', _file.target.result);
                $("#imgPreview").show();
            }
        }
    }





    submitButton.addEventListener("click", function () {

        var exten = imgFile.value.split('.').pop();
        exten = exten.toLowerCase();
        if (!(exten == "png" || exten == "jpg" || exten == "jpeg" || exten == "gif")) {
            imgFileFormatError.textContent = "Incorrect format";
            event.returnValue = false;
        }

        if (imgFile.files[0].size > (4 * 1000 * 1024)) {
            //pdfFileSizeError.textContent = "File too large";
            event.returnValue = false;
        }

    })


    $(document).ready(function () {
        $('#imgFile').bind('change', function () {
            ImgError.textContent = "";
            // check if the file is larger than 4mb
            if (this.files[0].size > (4 * 1000 * 1024)) {
                imgFileSizeError.textContent = "File too large";
            }
            else {
                // passed.
                imgFileSizeError.textContent = "";
            }
            var exten = imgFile.value.split('.').pop();
            exten = exten.toLowerCase();
            if (!(exten == "png" || exten == "jpg" || exten == "jpeg" || exten == "gif")) {
                imgFileFormatError.textContent = "Incorrect format";

            } else {
                imgFileFormatError.textContent = "";
            }
        });
    })

</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
