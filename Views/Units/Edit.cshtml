@model ResultManagement.ViewModel.UnitViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit Unit</h2>
<script src="https://unpkg.com/jquery@3.3.1/dist/jquery.js"></script>

@using (Html.BeginForm("Edit", "Units", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UnitCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UnitCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UnitTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UnitTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitCordinator, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UnitCordinator, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UnitCordinator, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.PdfTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <p id="PdfError" class="" style="color:red;">@ViewBag.PdfError</p>
                <p>@Html.DisplayFor(model => model.PdfTitle)</p>
                <p id="pdfFileSizeError" style="color:red;"></p>
                <p id="pdfFileFormatError" style="color:red;"></p>
                <input type="file" id="pdfFile" name="PdfFile" value="Change PDF" accept=".pdf" />
                @Html.ValidationMessageFor(model => model.PdfFile, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" id="submitButton" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>

    var pdfFileSizeError = document.getElementById("pdfFileSizeError");
    var pdfFile = document.getElementById("pdfFile");
    var submitButton = document.getElementById("submitButton");
    var PdfError = document.getElementById("PdfError");


    submitButton.addEventListener("click", function () {

        if (pdfFile.files[0].size > (4 * 1000 * 1024)) {
            //pdfFileSizeError.textContent = "File too large";
            event.returnValue = false;
        }
        var exten = pdfFile.value.split('.').pop();
        exten = exten.toLowerCase();
        if (!(exten == "pdf")) {
            console.log("aa");
            pdfFileFormatError.textContent = "Incorrect format";
            event.returnValue = false;
        } else {
            console.log("bb");
            pdfFileFormatError.textContent = "";
        }
    })


    $(document).ready(function () {

        $('#pdfFile').bind('change', function () {
            var exten = pdfFile.value.split('.').pop();
            exten = exten.toLowerCase();
            if (!(exten == "pdf")) {
                pdfFileFormatError.textContent = "Incorrect format";
                event.returnValue = false;
            } else {
                pdfFileFormatError.textContent = "";
            }
            PdfError.textContent = "";
            // check if the file is larger than 4mb
            if (this.files[0].size > (4 * 1000 * 1024)) {
                pdfFileSizeError.textContent = "File too large";
            }
            else {
                // passed.
                pdfFileSizeError.textContent = "";
            }
        });
    })

</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
